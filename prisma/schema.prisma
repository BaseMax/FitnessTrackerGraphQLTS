// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String?          @unique
  username         String           @unique
  password         String
  role             Role             @default(user)
  followers        Follow[]         @relation("Follower")
  followings       Follow[]         @relation("Following")
  followersCount   Int              @default(0)
  workouts         Workout[]
  feedbacks        Feedback[]
  sentRequests     Request[]        @relation("SentFriendRequests")
  receivedRequests Request[]        @relation("ReceivedFriendRequests")
  comments         Comment[]
  workoutLog       WorkoutLog[]
  likes            Like[]
  goals            FitnessGoal[]
  profile          Profile?
  exerciseReviews  ExerciseReview[]
  friends          User[]           @relation("UserFriends")
  friendss         User[]           @relation("UserFriends")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  weight    Int?
  height    Int?
  image     String?
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  admin
  user
}

model Request {
  id         Int           @id @default(autoincrement())
  status     RequestStatus
  sender     User          @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User          @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Follow {
  follower    User @relation("Follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("Following", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Workout {
  id            Int        @id @default(autoincrement())
  name          String
  exercise      Exercise[]
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  comments      Comment[]
  likes         Like[]
  numberOfLikes Int        @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  userId    Int
  workoutId Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId Int
  userId    Int
  createdAt DateTime @default(now())
}

model Exercise {
  id                 Int              @id @default(autoincrement())
  name               String
  sets               Int
  reps               Int
  weight             Float
  workout            Workout          @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId          Int
  WorkoutLog         WorkoutLog[]
  category           ExerciseCategory @relation(fields: [exerciseCategoryId], references: [id])
  reviews            ExerciseReview[]
  exerciseCategoryId Int
}

model ExerciseCategory {
  id        Int        @id @default(autoincrement())
  name      String
  exercises Exercise[]
}

model ExerciseReview {
  id         Int      @id @default(autoincrement())
  text       String
  rate       Float    @default(0)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  exerciseId Int
  userId     Int
}

model WorkoutLog {
  id         Int      @id @default(autoincrement())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  date       DateTime
  sets       Int
  reps       Int
  weight     Float
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model FitnessGoal {
  id        Int      @id @default(autoincrement())
  name      String
  type      String // Example: "weight loss", "muscle gain", "performance"
  target    String // Example: "lose 10 kg", "gain 5 kg of muscle", "run 5 km in 20 minutes"
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
}
